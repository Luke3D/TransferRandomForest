Timer unit: 1e-06 s

Total time: 0.276265 s
File: <ipython-input-35-66a1765c970c>
Function: STRUCT at line 277

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   277                                           def STRUCT(Xsource,ysource,Xtarget,ytarget,n_trees,C,verbos = False):
   278                                               # Assumption: ysource has all the labels of the problem 
   279                                               #estimator = DecisionTreeClassifier(max_features='sqrt',random_state=0,max_depth=2)
   280         1           65     65.0      0.0      Estimator = RandomForestClassifier(max_features='sqrt',random_state=0,n_estimators=n_trees)
   281         1        69801  69801.0     25.3      Estimator = Estimator.fit(Xsource, ysource)
   282         1            3      3.0      0.0      RF = []
   283        11           21      1.9      0.0      for rf in range(Estimator.n_estimators):
   284        10           19      1.9      0.0          estimator = Estimator.estimators_[rf]
   285        10        50386   5038.6     18.2          dis_node = value_for_all(estimator,C)
   286        10          182     18.2      0.1          P = list(np.zeros(estimator.tree_.capacity))
   287        10           46      4.6      0.0          P[0] = range(len(ytarget))
   288        10          117     11.7      0.0          Q = list(np.zeros(estimator.tree_.capacity))
   289        10           23      2.3      0.0          Q[0] = dis_node[0,:]
   290        10           72      7.2      0.0          thresh = np.zeros(estimator.tree_.capacity)
   291        10           24      2.4      0.0          remain = [0]
   292        10           18      1.8      0.0          subset = []
   293       140          136      1.0      0.0          while(len(remain)!=0):
   294       130          149      1.1      0.1              i = remain[0]
   295       130          326      2.5      0.1              LF = estimator.tree_.children_left
   296       130          228      1.8      0.1              LR = estimator.tree_.children_right
   297       130          171      1.3      0.1              index_left = LF[i]
   298       130          147      1.1      0.1              index_right = LR[i]
   299       130          178      1.4      0.1              if(index_left!=-1):
   300        60          117      1.9      0.0                  QL = dis_node[index_left,:]
   301        60           86      1.4      0.0                  QR = dis_node[index_right,:]
   302        60          125      2.1      0.0                  f = estimator.tree_.feature[i]
   303        60       146162   2436.0     52.9                  [th, ql, qr, left, right] = threshold_selection(Xtarget,ytarget,np.array(P[i]),f,QL,QR,C,verbos)
   304        60          131      2.2      0.0                  thresh[i] = th
   305        60           92      1.5      0.0                  P[index_left] = left
   306        60           73      1.2      0.0                  P[index_right] = right
   307        60           65      1.1      0.0                  Q[index_left] = ql
   308        60           52      0.9      0.0                  Q[index_right] = qr
   309        60           72      1.2      0.0                  if(len(left)!=0):
   310        60          704     11.7      0.3                      remain = np.append(remain,index_left)
   311        60           72      1.2      0.0                  if(len(right)!=0):
   312        60          503      8.4      0.2                      remain = np.append(remain,index_right)
   313        60           76      1.3      0.0                  if(len(left)>0 and len(right)>0):
   314        60           99      1.6      0.0                      subset.append(i)
   315       130          159      1.2      0.1              remain = remain[1:]
   316        10           48      4.8      0.0          lf =  LF[subset]
   317        10           30      3.0      0.0          lr =  LR[subset]
   318        10          109     10.9      0.0          subset = np.append(subset,lf)
   319        10           71      7.1      0.0          subset = np.append(subset,lr)
   320        10          251     25.1      0.1          subset = np.unique(np.sort(subset))
   321        10           19      1.9      0.0          subset = np.array(subset)
   322        10          863     86.3      0.3          (target_lf,target_lr) = TransferToSKLsequence(np.array(LF),np.array(LR),subset)
   323        10         4155    415.5      1.5          ST = convert_from_scikit_learn_to_dic_STRUT(estimator,thresh,C,Q,target_lf,target_lr,estimator.tree_.feature[subset])
   324        10           18      1.8      0.0          RF.append(ST)
   325         1            1      1.0      0.0      return RF