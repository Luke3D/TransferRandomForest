Timer unit: 1e-06 s

Total time: 1681.84 s
File: <ipython-input-7-7dec4a7c6a43>
Function: STRUCT at line 281

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   281                                           def STRUCT(Xsource,ysource,Xtarget,ytarget,n_trees,C,verbos = False):
   282                                               # Assumption: ysource has all the labels of the problem 
   283                                               #estimator = DecisionTreeClassifier(max_features='sqrt',random_state=0,max_depth=2)
   284         1           88     88.0      0.0      Estimator = RandomForestClassifier(max_features='sqrt',random_state=0,n_estimators=n_trees)
   285         1      1067030 1067030.0      0.1      Estimator = Estimator.fit(Xsource, ysource)
   286         1            2      2.0      0.0      RF = []
   287        11           35      3.2      0.0      for rf in range(Estimator.n_estimators):
   288        10           54      5.4      0.0          estimator = Estimator.estimators_[rf]
   289        10       633342  63334.2      0.0          dis_node = value_for_all(estimator,C)
   290        10         8537    853.7      0.0          P = list(np.zeros(estimator.tree_.capacity))
   291        10          157     15.7      0.0          P[0] = range(len(ytarget))
   292        10         5759    575.9      0.0          Q = list(np.zeros(estimator.tree_.capacity))
   293        10           49      4.9      0.0          Q[0] = dis_node[0,:]
   294        10           96      9.6      0.0          thresh = np.zeros(estimator.tree_.capacity)
   295        10           36      3.6      0.0          remain = [0]
   296        10           22      2.2      0.0          subset = []
   297      8378         9980      1.2      0.0          while(len(remain)!=0):
   298      8368        10831      1.3      0.0              i = remain[0]
   299      8368        37147      4.4      0.0              LF = estimator.tree_.children_left
   300      8368        18567      2.2      0.0              LR = estimator.tree_.children_right
   301      8368        11477      1.4      0.0              index_left = LF[i]
   302      8368         9351      1.1      0.0              index_right = LR[i]
   303      8368        13794      1.6      0.0              if(index_left!=-1):
   304      4179         9828      2.4      0.0                  QL = dis_node[index_left,:]
   305      4179         7122      1.7      0.0                  QR = dis_node[index_right,:]
   306      4179        11380      2.7      0.0                  f = estimator.tree_.feature[i]
   307      4179   1679412176 401869.4     99.9                  [th, ql, qr, left, right] = threshold_selection(Xtarget,ytarget,np.array(P[i]),f,QL,QR,C,verbos)
   308      4179        16775      4.0      0.0                  thresh[i] = th
   309      4179         8331      2.0      0.0                  P[index_left] = left
   310      4179         5113      1.2      0.0                  P[index_right] = right
   311      4179         5742      1.4      0.0                  Q[index_left] = ql
   312      4179         5466      1.3      0.0                  Q[index_right] = qr
   313      4179         7388      1.8      0.0                  if(len(left)!=0):
   314      4179       115520     27.6      0.0                      remain = np.append(remain,index_left)
   315      4179         6923      1.7      0.0                  if(len(right)!=0):
   316      4179        50431     12.1      0.0                      remain = np.append(remain,index_right)
   317      4179         6282      1.5      0.0                  if(len(left)>0 and len(right)>0):
   318      4179         9121      2.2      0.0                      subset.append(i)
   319      8368        12254      1.5      0.0              remain = remain[1:]
   320        10          670     67.0      0.0          lf =  LF[subset]
   321        10          492     49.2      0.0          lr =  LR[subset]
   322        10          857     85.7      0.0          subset = np.append(subset,lf)
   323        10          177     17.7      0.0          subset = np.append(subset,lr)
   324        10         1293    129.3      0.0          subset = np.unique(np.sort(subset))
   325        10           33      3.3      0.0          subset = np.array(subset)
   326        10        60536   6053.6      0.0          (target_lf,target_lr) = TransferToSKLsequence(np.array(LF),np.array(LR),subset)
   327        10       263759  26375.9      0.0          ST = convert_from_scikit_learn_to_dic_STRUT(estimator,thresh,C,Q,target_lf,target_lr,estimator.tree_.feature[subset])
   328        10           56      5.6      0.0          RF.append(ST)
   329         1            1      1.0      0.0      return RF